require('buffer')

/* 
Static:
Buffer.alloc(size[, fill[, encoding]])
Выделяет новый буфер указаного size(0<=size<require('buffer').kMaxLength)
fill-опциональный параметр - чем заполнить буфер (<string> | <Buffer> | <Uint8Array> | <integer>)
ecnoding-только если указан fill и он string-заполняет созданый буфер fill строкой в encoding кодировки, если fill && !string - ничего не делает
================================================================================================================================================================
Buffer.allocUnsafe(size)
+скорость -секьюрность
Выделяет новый буфер указаного size с неизвестным содержимым из памяти(потенциально опасно так как в памяти может быть все что угодно)
Идеальный вариант если делать копию
const oldBuffer = Buffer.from('some data')
const bufferCopy = Buffer.allocUnsafe(oldBuffer.length)
oldBuffer.copy(bufferCopy)
================================================================================================================================================================
Buffer.allocUnsafeSlow(size)
??????????????????????????/
================================================================================================================================================================
Buffer.byteLength(string[, encoding]) : integer
string - <string> | <Buffer> | <TypedArray> | <DataView> | <ArrayBuffer> | <SharedArrayBuffer>
Возвращает числов байтов небходимое для string в указаной encoding
================================================================================================================================================================
Buffer.compare(buf1, buf2) : 0|-1|1
buf - <Buffer> | <Uint8Array>
Buffer.compare сравнивает побайтово,0-одинаковые,1-первый болььше,-1-второй больше
================================================================================================================================================================
Buffer.concat(list[, totalLength]) : Buffer
Возвращает новый буфер склееный из массива list [Buffer|Uint8Array]
totalLength-можно указать размер получившегося буфера, если > чем результат дописывается нулями
================================================================================================================================================================
Buffer.isBuffer(obj) - Array.isArray(arr) : Boolean
================================================================================================================================================================
Buffer.isEncoding(encoding) : boolean
encoding - string 
поддерживаемая ли кодировка
================================================================================================================================================================
Buffer.from(array|arrayBuffer|buffer|object|string)
================================================================================================================================================================
Buffer.from(array)
Возвращает buffer на основании масива битов в диапазоне 0-255
либо номер юникода в формате 0x..
либо номер в ascii таблице 32-126
================================================================================================================================================================

================================================================================================================================================================
================================================================================================================================================================
================================================================================================================================================================
================================================================================================================================================================
================================================================================================================================================================
================================================================================================================================================================
================================================================================================================================================================
Instance Methods:
buf.compare(target[, targetStart[, targetEnd[, sourceStart[, sourceEnd]]]])
target:<Buffer> | <Uint8Array>
ends:not inclusive
================================================================================================================================================================
buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])
================================================================================================================================================================
buf.entries()
================================================================================================================================================================
buf.equals(otherBuffer)
================================================================================================================================================================
buf.fill(value[, offset[, end]][, encoding])
================================================================================================================================================================
buf.includes(value[, byteOffset][, encoding])
================================================================================================================================================================
buf.indexOf(value[, byteOffset][, encoding])
================================================================================================================================================================
buf.keys()
================================================================================================================================================================
buf.lastIndexOf(value[, byteOffset][, encoding])
================================================================================================================================================================

================================================================================================================================================================

================================================================================================================================================================

================================================================================================================================================================

================================================================================================================================================================

================================================================================================================================================================

================================================================================================================================================================
*/
const a = Buffer.from([0x61,97,125,0x6f,32,127,72,127,])
console.log(a)
console.log(a.toString())
